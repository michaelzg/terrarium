/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: hello.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace hello {
    export class HelloRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): HelloRequest {
            const message = new HelloRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelloRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HelloRequest {
            return HelloRequest.deserialize(bytes);
        }
    }
    export class HelloReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): HelloReply {
            const message = new HelloReply({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelloReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelloReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HelloReply {
            return HelloReply.deserialize(bytes);
        }
    }
    export class GetMessagesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            topic?: string;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            topic?: string;
            limit?: number;
        }): GetMessagesRequest {
            const message = new GetMessagesRequest({});
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                topic?: string;
                limit?: number;
            } = {};
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.topic.length)
                writer.writeString(1, this.topic);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessagesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessagesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.topic = reader.readString();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessagesRequest {
            return GetMessagesRequest.deserialize(bytes);
        }
    }
    export class GetMessagesReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            messages?: Message[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("messages" in data && data.messages != undefined) {
                    this.messages = data.messages;
                }
            }
        }
        get messages() {
            return pb_1.Message.getRepeatedWrapperField(this, Message, 1) as Message[];
        }
        set messages(value: Message[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            messages?: ReturnType<typeof Message.prototype.toObject>[];
        }): GetMessagesReply {
            const message = new GetMessagesReply({});
            if (data.messages != null) {
                message.messages = data.messages.map(item => Message.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                messages?: ReturnType<typeof Message.prototype.toObject>[];
            } = {};
            if (this.messages != null) {
                data.messages = this.messages.map((item: Message) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.messages.length)
                writer.writeRepeatedMessage(1, this.messages, (item: Message) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessagesReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessagesReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Message.deserialize(reader), Message));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessagesReply {
            return GetMessagesReply.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            topic?: string;
            part?: number;
            kafkaoffset?: number;
            payload?: string;
            created_at?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
                if ("part" in data && data.part != undefined) {
                    this.part = data.part;
                }
                if ("kafkaoffset" in data && data.kafkaoffset != undefined) {
                    this.kafkaoffset = data.kafkaoffset;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get part() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set part(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get kafkaoffset() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set kafkaoffset(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set created_at(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            topic?: string;
            part?: number;
            kafkaoffset?: number;
            payload?: string;
            created_at?: string;
        }): Message {
            const message = new Message({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.topic != null) {
                message.topic = data.topic;
            }
            if (data.part != null) {
                message.part = data.part;
            }
            if (data.kafkaoffset != null) {
                message.kafkaoffset = data.kafkaoffset;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                topic?: string;
                part?: number;
                kafkaoffset?: number;
                payload?: string;
                created_at?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.topic != null) {
                data.topic = this.topic;
            }
            if (this.part != null) {
                data.part = this.part;
            }
            if (this.kafkaoffset != null) {
                data.kafkaoffset = this.kafkaoffset;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.topic.length)
                writer.writeString(2, this.topic);
            if (this.part != 0)
                writer.writeInt32(3, this.part);
            if (this.kafkaoffset != 0)
                writer.writeInt64(4, this.kafkaoffset);
            if (this.payload.length)
                writer.writeString(5, this.payload);
            if (this.created_at.length)
                writer.writeString(6, this.created_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.topic = reader.readString();
                        break;
                    case 3:
                        message.part = reader.readInt32();
                        break;
                    case 4:
                        message.kafkaoffset = reader.readInt64();
                        break;
                    case 5:
                        message.payload = reader.readString();
                        break;
                    case 6:
                        message.created_at = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedHelloApiService {
        static definition = {
            SayHello: {
                path: "/hello.HelloApi/SayHello",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HelloRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HelloRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HelloReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HelloReply.deserialize(new Uint8Array(bytes))
            },
            GetMessages: {
                path: "/hello.HelloApi/GetMessages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetMessagesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMessagesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetMessagesReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetMessagesReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SayHello(call: grpc_1.ServerUnaryCall<HelloRequest, HelloReply>, callback: grpc_1.sendUnaryData<HelloReply>): void;
        abstract GetMessages(call: grpc_1.ServerUnaryCall<GetMessagesRequest, GetMessagesReply>, callback: grpc_1.sendUnaryData<GetMessagesReply>): void;
    }
    export class HelloApiClient extends grpc_1.makeGenericClientConstructor(UnimplementedHelloApiService.definition, "HelloApi", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SayHello: GrpcUnaryServiceInterface<HelloRequest, HelloReply> = (message: HelloRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HelloReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HelloReply>, callback?: grpc_1.requestCallback<HelloReply>): grpc_1.ClientUnaryCall => {
            return super.SayHello(message, metadata, options, callback);
        };
        GetMessages: GrpcUnaryServiceInterface<GetMessagesRequest, GetMessagesReply> = (message: GetMessagesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetMessagesReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetMessagesReply>, callback?: grpc_1.requestCallback<GetMessagesReply>): grpc_1.ClientUnaryCall => {
            return super.GetMessages(message, metadata, options, callback);
        };
    }
}
