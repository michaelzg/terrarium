version: '3'
services:
  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    ports:
      - "9092:9092"
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  api-tonic:
    build:
      context: ../api-tonic
      dockerfile: Dockerfile
    ports:
      - "50051:50051" # Expose port for potential direct access/debugging (optional)
    environment:
      - RUST_LOG=info
      # Add any other necessary environment variables for the API
    depends_on:
      - kafka # Assuming the API might depend on Kafka
      - postgres # Assuming the API might depend on Postgres
    networks:
      - app-network

  envoy:
    image: envoyproxy/envoy:v1.28-latest
    volumes:
      - ../ui/envoy.yaml:/etc/envoy/envoy.yaml
      - ../ui/proto:/etc/envoy
    ports:
      - "8080:8080"
      - "9901:9901"
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
